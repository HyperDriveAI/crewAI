from typing import Optional


class CacheHandler:
    """Callback handler for tool usage."""

    _cache: dict = {}

    def __init__(self):
        self._cache = {}

    def add(self, tool, input, output):
        """Add a mapping from a tool and its input to an output.

        This function takes a tool name, an input value, and an output value,
        strips any leading/trailing whitespace from the input, and stores them
        in a cache dictionary. The key is a combination of the tool name and the
        stripped input value.

        Args:
            tool (str): The name of the tool.
            input (str): The input value for the tool.
            output (Any): The output generated by the tool.
        """

        input = input.strip()
        self._cache[f"{tool}-{input}"] = output

    def read(self, tool, input) -> Optional[str]:
        """Read data from a cache using a specified tool and input.

        This function takes a tool name and an input string, strips any leading
        or trailing whitespace, and then retrieves the associated value from the
        cache. The key used for the cache retrieval is constructed by combining
        the tool name and the stripped input with a hyphen.

        Args:
            tool (str): The name of the tool to be used.
            input (str): The input string to be processed and used as part of the cache key.

        Returns:
            Optional[str]: The value retrieved from the cache, or None if the key does not exist.

        Examples:
            result = read('tool1', 'input1')
            print(result)  # Output will depend on whether 'tool1-input1' exists in
            the cache
        """

        input = input.strip()
        return self._cache.get(f"{tool}-{input}")
