from typing import Optional


class CacheHandler:
    """Callback handler for tool usage."""

    _cache: dict = {}

    def __init__(self):
        """        Initializes the object with an empty cache.

        This method initializes the object by creating an empty cache dictionary.
        """

        self._cache = {}

    def add(self, tool, input, output):
        """        Add the output of a tool with the corresponding input to the cache.

        Args:
            tool (str): The name of the tool.
            input (str): The input for the tool.
            output: The output generated by the tool.
        """

        input = input.strip()
        self._cache[f"{tool}-{input}"] = output

    def read(self, tool, input) -> Optional[str]:
        """        Read the cached data for the given tool and input.

        Args:
            tool (str): The name of the tool.
            input (str): The input data.

        Returns:
            Optional[str]: The cached data for the given tool and input, or None if not found.
        """

        input = input.strip()
        return self._cache.get(f"{tool}-{input}")
