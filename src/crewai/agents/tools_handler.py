from typing import Any, Dict

from langchain.callbacks.base import BaseCallbackHandler

from ..tools.cache_tools import CacheTools
from .cache.cache_handler import CacheHandler


class ToolsHandler(BaseCallbackHandler):
    """Callback handler for tool usage."""

    last_used_tool: Dict[str, Any] = {}
    cache: CacheHandler

    def __init__(self, cache: CacheHandler, **kwargs: Any):
        """        Initialize the callback handler.

        Args:
            cache (CacheHandler): The cache handler object.
            **kwargs (Any): Additional keyword arguments.

        Note:
            This method initializes the callback handler by setting the cache handler and any additional keyword arguments.
        """
        self.cache = cache
        super().__init__(**kwargs)

    def on_tool_start(
        self, serialized: Dict[str, Any], input_str: str, **kwargs: Any
    ) -> Any:
        """        Run when tool starts running.

        This function is called when a tool starts running. It retrieves the name from the serialized data and checks if it is not in the list of invalid names. If the name is valid, it creates a dictionary with tool and input information and assigns it to the last_used_tool attribute of the object.

        Args:
            serialized (Dict[str, Any]): Serialized data containing the name of the tool.
            input_str (str): Input string for the tool.
            **kwargs (Any): Additional keyword arguments.
        """
        name = serialized.get("name")
        if name not in ["invalid_tool", "_Exception"]:
            tools_usage = {
                "tool": name,
                "input": input_str,
            }
            self.last_used_tool = tools_usage

    def on_tool_end(self, output: str, **kwargs: Any) -> Any:
        """        Run when tool ends running.

        This function is called when a tool finishes running. It checks the output for specific error messages and if none are found, it adds the last used tool, input, and output to the cache.

        Args:
            output (str): The output generated by the tool.
            **kwargs (Any): Additional keyword arguments.

        Returns:
            Any: Returns the result of the function, if any.
        """
        if (
            "is not a valid tool" not in output
            and "Invalid or incomplete response" not in output
            and "Invalid Format" not in output
        ):
            if self.last_used_tool["tool"] != CacheTools().name:
                self.cache.add(
                    tool=self.last_used_tool["tool"],
                    input=self.last_used_tool["input"],
                    output=output,
                )
